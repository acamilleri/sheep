#!/bin/bash

set -e 

#
# Log on stdout
#
# $* - Text to log
#
log() {
    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $*"
}

#
# $1 - MAC address
#
get_ip_from_mac() {
    sudo arp -an | awk /$1/'{print $2}' | sed 's/[()]//g'
}

#
# $1 - MAC address
#
delete_arp_entry() {
    ip_to_delete=$(get_ip_from_mac $1)
    if [ -n "${ip_to_delete}" ] ; then
        sudo arp -d ${ip_to_delete}
    fi
}

#
# Look at the ARP table every 10 seconds until either the IP address
# matching the input MAC address is found or the timeout is reached.
#
# $1 - MAC address
# $2 - Timeout in seconds
#
wait_for_ip() {
    local mac=$1
    local max_wait=$2
    local s_time=$(date +%s)
    local c_time=
    local ip=
    while true ; do
        c_time=$(date +%s)

        ip=$(get_ip_from_mac ${mac})
        if [ -n "${ip}" ] ; then
            log "IP $ip found for MAC ${mac}"
            break
        fi

        if [ $(($c_time - $s_time)) -gt ${max_wait} ] ; then
            log "ERROR : Timeout..."
            exit 1
        fi

        log "Waiting for IP to be reachable for MAC ${mac}..."

        sleep 10
    done
}

#
# Run a command through SSH
#
# $1 - Linux IP
# $2 - Linux username
# $3 - Linux password
# $* Command to execute
#
ssh_cmd() {
    local ip=$1
    local username=$2
    local password=$3
    shift ; shift ; shift
    {
        timeout 20 sshpass -p ${password} \
                             ssh -o StrictHostKeyChecking=no \
                                 -o UserKnownHostsFile=/dev/null \
                                 -o LogLevel=QUIET \
                                 ${username}@${ip} $*
        return $?
    } < /dev/null
}

#
# Wait untill SSH port is open and SSH login using specified user/password works
# If the timeout is reached, it will exit with an error code.
#
# $1 - Linux IP address
# $2 - Linux username
# $3 - Linux password
# $4 - Timeout in secconds
#
wait_for_ssh() {
    local ip=$1
    local username=$2
    local password=$3
    local max_wait=$4
    local s_time=$(date +%s)
    local c_time=
    local ssh_ok=0
    while true ; do
        c_time=$(date +%s)
        ssh_ok=$(sudo nmap -sT -p 22 ${ip} | grep '22/tcp open' | wc -l)
        if [ $ssh_ok -eq 1 ] ; then
            if [ "$(ssh_cmd ${ip} ${username} ${password} echo ok)" = "ok" ] ; then
                log "SSH connection ok"
                break
            fi
            ssh_ok=0
        fi

        if [ $(($c_time - $s_time)) -gt ${max_wait} ] ; then
            log "ERROR : Timeout !"
            exit 1
        fi

        log "Waiting for Linux to be SSH accessible on IP ${ip}..."
        sleep 10
    done
}

#
# $1 - Linux IP address
# $2 - Linux username
# $3 - Linux password
#
print_sheep_log() {
    log ""
    log "!!! See Sheep log below !!!"
    log ""
    ssh_cmd ${1} ${2} ${3} 'cat /var/log/os-install.log'
    log ""
    log "!!! End of Sheep log !!!"
    log ""
}

#
# $1 - Linux IP address
# $2 - Linux username
# $3 - Linux password
# $4 - Timeout in secconds
#
wait_for_installation_complete() {
    local ip=$1
    local username=$2
    local password=$3
    local max_wait=$4
    local s_time=$(date +%s)
    local c_time=
    local ssh_ok=0
    while true ; do
        c_time=$(date +%s)

        if [ "$(ssh_cmd ${ip} ${username} ${password} 'if [ -e /var/run/sheep.success ] ; then echo ok ; fi')" == 'ok' ] ; then
            log 'Installation complete'
            break
        fi

        if [ $(($c_time - $s_time)) -gt ${max_wait} ] ; then
            print_sheep_log ${ip} ${username} ${password}
            exit 1
        fi

        log "Waiting for Sheep to complete OS installation..."
        sleep 10
    done

    print_sheep_log ${ip} ${username} ${password}
}

#
# Deploy TFTP and HTTP configuration file for network boot
#
deploy_boot_config() {
    cat > ${WORKDIR}/netboot <<- EOF
	default grml
	label grml
	kernel /grml/vmlinuz
	append boot=live fetch=${OS_DEPLOY_SQUASHFS} initrd=/grml/initrd.img ssh=grml ${EXTRA_KERNEL_CMDLINE} startup=/usr/bin/os-deploy deployScript=${OS_DEPLOY_SCRIPT} deployConfig=${OS_DEPLOY_CONFIG}
	EOF

    sudo mkdir -p /var/www/html/os-deploy

    sudo rm -f /var/www/html/os-deploy/${CONFIG_NAME} /var/tftp/pxelinux.cfg/conf/${CONFIG_NAME} /var/www/html/os-deploy/${CONFIG_NAME}.yml
    sudo cp ${OS_DEPLOY_SCRIPT_SOURCE} /var/www/html/os-deploy/${CONFIG_NAME}
    sudo cp ${WORKDIR}/netboot /var/tftp/pxelinux.cfg/conf/${CONFIG_NAME}
    sudo cp ${OS_DEPLOY_CONFIG_SOURCE} /var/www/html/os-deploy/${CONFIG_NAME}.yml
    
    log "Set PXE Pilot configuration '${CONFIG_NAME}' for machine '${DUT_NAME}'"
    pxe-pilot config deploy ${CONFIG_NAME} ${DUT_NAME} > /dev/null 2>&1
}

#
# $1 - DUT Name
#
get_ipmi_ip() {
    pxe-pilot host list | grep " $1 " | sed -e 's/.* | \([0-9]*.[0-9]*.[0-9]*.[0-9]*\) | .*/\1/'
}

#
# $1 - DUT Name
# $2 - IPMI command
#
ipmi() {
    set +e
    local cmd="ipmitool -I lanplus -U USERID -P PASSW0RD -H $(get_ipmi_ip ${1}) ${2}"
    sleep 3
    ${cmd}
    local status=$?
    set -e
    if [ ${status} -ne 0 ] ; then
        sleep 3
        ${cmd}
    fi
}

#
# $1 - DUT Name
#
start_dut() {
    local status=
    local s_time=$(date +%s)
    local c_time=
    local max_wait=20

    ipmi $1 "power on" > /dev/null 2>&1

    while true ; do
        c_time=$(date +%s)
        status=$(status_dut $1)
        if [ ${status} == 'on' ] ; then
            break
        fi

        if [ $(($c_time - $s_time)) -gt ${max_wait} ] ; then
            log "Time out due to ipmi unreachable"
            exit 1
        fi

        sleep 1
    done

}

#
# $1 - DUT Name
#
stop_dut() {
    local status=
    local s_time=$(date +%s)
    local c_time=
    local max_wait=20

    ipmi $1 "power off" > /dev/null 2>&1

    while true ; do
        c_time=$(date +%s)
        status=$(status_dut $1)
        if [ ${status} == 'off' ] ; then
            break
        fi

        if [ $(($c_time - $s_time)) -gt ${max_wait} ] ; then
            log "Time out due to ipmi unreachable"
            exit 1
        fi

        sleep 1
    done
}

#
# $1 - DUT Name
#
status_dut() {
    local status=$(ipmi $1 "power status" 2> /dev/null | sed "s/Chassis Power is //")
    if [[ ${status} != 'on' && ${status} != 'off' ]] ; then
        echo 'unknown'
        return
    fi
    echo "${status}"
}

#
# $1 - PXE Pilot host name
#
get_mac_address() {
    echo $(curl ${PXE_PILOT_API}/v1/hosts 2>/dev/null | jq -r ".[] | select(.name == \"${1}\") | .macAddresses[0]")
}

#
# Delete configurations created by the the test
#
cleanup() {
    log "Cleanup environment"
    sudo rm -f /var/tftp/pxelinux.cfg/conf/${CONFIG_NAME}
    sudo rm -f /var/www/html/os-deploy/${CONFIG_NAME}
}

#
# Run the overall testing scenario
#
main() {
    local dut_status="$(status_dut ${DUT_NAME})"

    log "Machine '${DUT_NAME}' power status is ${dut_status}"

    if [ ${dut_status} == 'on' ] ; then
        log "Stopping machine '${DUT_NAME}'"
        stop_dut ${DUT_NAME}
    fi

    log "Generate and deploy netboot configuration..."
    deploy_boot_config

    mac=$(get_mac_address ${DUT_NAME})
    log "MAC address for host '${DUT_NAME}' is ${mac}"

    log "Deleting ARP entry for MAC ${mac}"
    delete_arp_entry ${mac}

    log "Starting test on machine '${DUT_NAME}'"
    start_dut ${DUT_NAME}

    wait_for_ip ${mac} 450
    ip=$(get_ip_from_mac ${mac})
    if [ -z "${ip}" ] ; then
        log "Error.... Server did not boot !"
        exit 1
    fi

    log  "Waiting for GRML to boot..."
    wait_for_ssh ${ip} root grml 600

    log  "Waiting for the installation process to complete..."
    wait_for_installation_complete ${ip} root grml 600

    log  "Rebooting the machine..."
    pxe-pilot host reboot ${DUT_NAME}

    log  "Waiting for newly installed Linux to boot..."
    wait_for_ssh ${ip} linux linux 600

    if [ -n "${EXPECTED_UNAME}" ] ; then
        log "Checking machine '${DUT_NAME}' is running the expected operating system..."
        local uname_output=$(ssh_cmd ${ip} linux linux uname -a)
        if [ $(echo ${uname_output} | grep "${EXPECTED_UNAME}" | wc -l) -ne 1 ] ; then
            log "ERROR - Operating system detected : ${uname_output}"
            exit 1
        fi
        log "Operating system : ${uname_output}"
    fi

    log "Power off server ${DUT_NAME}"
    # Sending a poweroff command through ssh lead to close SSH connection and return a non-zero
    # exit code. Disabling -e flag to ignore this error
    set +e
    ssh_cmd ${ip} linux linux sudo poweroff
    set -e

    log "Success :)"
}

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
OS_DEPLOY_SCRIPT_SOURCE=$SCRIPT_DIR/../../os-install.sh
OS_DEPLOY_CONFIG_SOURCE=$SCRIPT_DIR/${CONFIG_FILE_NAME}
DUT_NAME=${CI_RUNNER_DESCRIPTION}
CONFIG_NAME=${CI_RUNNER_DESCRIPTION}_${CI_COMMIT_SHORT_SHA}_${CI_PIPELINE_ID}_${CI_JOB_ID}
OS_DEPLOY_SQUASHFS=http://${OS_DEPLOY_CI_RUNNER_IP}/os-deploy.squashfs
OS_DEPLOY_SCRIPT=http://${OS_DEPLOY_CI_RUNNER_IP}/os-deploy/${CONFIG_NAME}
OS_DEPLOY_CONFIG=http://${OS_DEPLOY_CI_RUNNER_IP}/os-deploy/${CONFIG_NAME}.yml
PXE_PILOT_API=http://${OS_DEPLOY_CI_RUNNER_IP}:3478
WORKDIR=$(mktemp -d)

if [ -z "${CI_RUNNER_DESCRIPTION}" ] ; then
    log "ERROR : Variable 'CI_RUNNER_DESCRIPTION' is not defined..."
    exit 1
fi

if [ -z "${OS_DEPLOY_CI_RUNNER_IP}" ] ; then
    log "ERROR : Variable 'OS_DEPLOY_CI_RUNNER_IP' is not defined..."
    exit 1
fi

if [ -z "${CONFIG_FILE_NAME}" ] ; then
    log "ERROR : Variable 'CONFIG_FILE_NAME' is not defined..."
    exit 1
fi

trap cleanup EXIT

main
