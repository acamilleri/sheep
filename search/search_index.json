{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sheep Install any Linux distribution in seconds with Sheep The aim of Sheep is to provide tooling to install any Linux distribution from a running Linux operating system in an automated way implementing a standard process. It also provide good efficiency in term of execution time. Motivation Installing a Linux distribution in an automated way has been a concern for system administrators for a long time. Of course, distribution vendors themselves provide mechanism to run their own installers in an automated way. The thing is, every single distribution comes with its own installation process and its own tools. Sheep proposes to uniform the installation process to easily install any Linux system whatever the distribution is. Tools provided by distribution vendors are powerful and highly configurable. However, they come with some important downsides : Configuration mechanisms and tools are specific to each distribution (or at least specific to the distribution family) Creating configuration is painful beacuse of file format constraints and the amount of possible configurations The installation process is quite long Installing a distribution offline - without relying on an internet connection - requires additionnal work (e.g. setup a local distribution package repository) Sheep goal is to get rid of all those painpoints. Looking at how Linux works and what are the necessary efforts to install it on a drive, it appears that it is quite easy to describe a process that is always the regardless the distribution. See Internals Section to get more details about this process. The main idea of Sheep is to avoid using vendor installer programs and execute instead necessary steps to install the Linux operating system starting from a filesystem image. A central concept in Sheep is to install Linux starting from a cloud image. Today, most of the distribution vendors are publishing cloud images in various formats for the most popular cloud platforms. Sheep focuses on qcow2 images. As this is a widespread open format, it's provided by all vendors. That said, Sheep is able to handle compressed tar archives for the root filesystem which can be very useful in many situations. To summarize, here are the advantages of Sheep over the standard vendors installers : Sheep is very easy to use with a minimal configuration Sheep is able to install any Linux distribution Using official cloud images from vendors makes easy to find images for Sheep Execution time is really fast. In the most advantageous situation, Sheep installs Linux in about 30 seconds Lastly, as any solution, Sheep comes with a couple of drawbacks. Sheep does not offer as much options as the vendors installers. That said, Sheep source code is quite simple and easy to customize. Don't hesitate to open issues to ask for help or request features. Supported Linux distributions Sheep provide a process able to install any Linux operating system. However, Sheep uses cloud-init to configuration the operating system. Sheep have been successfully tested with the following distributions Ubuntu 16.04 Ubuntu 18.04 CentOS 7 Debian 9 Fedora 28 Fedora 29 Fedora 30 OpenSuse Leap 15.0 OpenSuse Leap 15.1 License Copyright 2020 Mathilde Hermet Copyright 2020 Guillaume Giamarchi Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Home"},{"location":"#sheep","text":"Install any Linux distribution in seconds with Sheep The aim of Sheep is to provide tooling to install any Linux distribution from a running Linux operating system in an automated way implementing a standard process. It also provide good efficiency in term of execution time.","title":"Sheep"},{"location":"#motivation","text":"Installing a Linux distribution in an automated way has been a concern for system administrators for a long time. Of course, distribution vendors themselves provide mechanism to run their own installers in an automated way. The thing is, every single distribution comes with its own installation process and its own tools. Sheep proposes to uniform the installation process to easily install any Linux system whatever the distribution is. Tools provided by distribution vendors are powerful and highly configurable. However, they come with some important downsides : Configuration mechanisms and tools are specific to each distribution (or at least specific to the distribution family) Creating configuration is painful beacuse of file format constraints and the amount of possible configurations The installation process is quite long Installing a distribution offline - without relying on an internet connection - requires additionnal work (e.g. setup a local distribution package repository) Sheep goal is to get rid of all those painpoints. Looking at how Linux works and what are the necessary efforts to install it on a drive, it appears that it is quite easy to describe a process that is always the regardless the distribution. See Internals Section to get more details about this process. The main idea of Sheep is to avoid using vendor installer programs and execute instead necessary steps to install the Linux operating system starting from a filesystem image. A central concept in Sheep is to install Linux starting from a cloud image. Today, most of the distribution vendors are publishing cloud images in various formats for the most popular cloud platforms. Sheep focuses on qcow2 images. As this is a widespread open format, it's provided by all vendors. That said, Sheep is able to handle compressed tar archives for the root filesystem which can be very useful in many situations. To summarize, here are the advantages of Sheep over the standard vendors installers : Sheep is very easy to use with a minimal configuration Sheep is able to install any Linux distribution Using official cloud images from vendors makes easy to find images for Sheep Execution time is really fast. In the most advantageous situation, Sheep installs Linux in about 30 seconds Lastly, as any solution, Sheep comes with a couple of drawbacks. Sheep does not offer as much options as the vendors installers. That said, Sheep source code is quite simple and easy to customize. Don't hesitate to open issues to ask for help or request features.","title":"Motivation"},{"location":"#supported-linux-distributions","text":"Sheep provide a process able to install any Linux operating system. However, Sheep uses cloud-init to configuration the operating system. Sheep have been successfully tested with the following distributions Ubuntu 16.04 Ubuntu 18.04 CentOS 7 Debian 9 Fedora 28 Fedora 29 Fedora 30 OpenSuse Leap 15.0 OpenSuse Leap 15.1","title":"Supported Linux distributions"},{"location":"#license","text":"Copyright 2020 Mathilde Hermet Copyright 2020 Guillaume Giamarchi Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"config/","text":"About Sheep Configuration File The configuration file is in yaml. If it isn't included in the sheep-live OS after a build, it will be downloaded by the program if you give the path to the file in the kernel parameters to boot sheep-live. As we decided to rely on cloud-init to configure the environment, there are two ways to write sheep configuration file: one is for users who want to setup the environment of the OS without any knowledge about cloud-init, and the second one is for users who know how to use cloud-init in NoCloud mode and want to have access to all cloud-init features via the sheep configuration file.","title":"About"},{"location":"config/#about","text":"","title":"About"},{"location":"config/#sheep-configuration-file","text":"The configuration file is in yaml. If it isn't included in the sheep-live OS after a build, it will be downloaded by the program if you give the path to the file in the kernel parameters to boot sheep-live. As we decided to rely on cloud-init to configure the environment, there are two ways to write sheep configuration file: one is for users who want to setup the environment of the OS without any knowledge about cloud-init, and the second one is for users who know how to use cloud-init in NoCloud mode and want to have access to all cloud-init features via the sheep configuration file.","title":"Sheep Configuration File"},{"location":"config_env/","text":"Environment Simplified mode Configure your future OS environment. This has to be done this way when cloud-init is disable . Otherwise this part won't be taken into account. This configuration will be turned into cloud-init user-data & meta-data files by sheep during execution. users : List users you want to create giving at least the name name : User name sudoer : Add this user to sudoer NB : It will be created as a no password sudoer password : User password ssh_authorized_key : Machine public key from where you want to access this server shell : User type of shell local_hostname : Machine hostname environment : users : - name : linux sudoer : true password : linux ssh_authorized_key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdXnRJVWf7OvFa0UZPkvDBave2BWhr29HFlO/bI/98rmPc0zn24a8Wplo/Sts4SrL3xZNATH5tWwNpPulBThPqnjdMU4Rw2Jf/mjlQXiT7+w3w60/HrMd62J/d/dyYrIuvuog3OAEi1vsiKCRm/9ptpbNA4E34ZUBSOpT3bx0b4NszYB2g7VdcmgHHXSY16AVCv3I3ZN0UmWphw1hpjpxfHTinE2pR5L0HVMikxqaxjCZI7DSpi8f4gQJn7gjLTh905o751Z3s7Y4L/v9NTEXmCPF425krwxDD4EMSMJ6BXgAExvPolWV0/W9HUtKX7XtEJUKWLUlikb7qTRWR1sld ubuntu@dev-01 shell : bash local_hostname : sheep Note If users are configured but none of them can access the OS because neither the ssh_authorized_key nor a password is configured, the program will exit with an error If this section is left empty: User linux with password linux will be given. Machine hostname will be sheep . Advanced mode (cloud-init) We can use more features enabled by cloud-init to set up the OS environment. Configuring the envrionment with cloud-init is done through meta-data and user-data files. The name of these files are the same than in cloudInit sheep section userData and metaData . Refer to cloud-init documentation for more details about syntax and options. cloudInit : enable : true metaData : instance-id : 001-local01 local-hostname : sheep networkConfig : version : 2 ethernets : enp12s0 : dhcp4 : true ens9 : addresses : - 172.19.17.111/24 gateway4 : 172.19.17.1 userData : users : - name : linux lock_passwd : false ssh_authorized_keys : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdXnRJVWf7OvFa0UZPkvDBave2BWhr29HFlO/bI/98rmPc0zn24a8Wplo/Sts4SrL3xZNATH5tWwNpPulBThPqnjdMU4Rw2Jf/mjlQXiT7+w3w60/HrMd62J/d/dyYrIuvuog3OAEi1vsiKCRm/9ptpbNA4E34ZUBSOpT3bx0b4NszYB2g7VdcmgHHXSY16AVCv3I3ZN0UmWphw1hpjpxfHTinE2pR5L0HVMikxqaxjCZI7DSpi8f4gQJn7gjLTh905o751Z3s7Y4L/v9NTEXmCPF425krwxDD4EMSMJ6BXgAExvPolWV0/W9HUtKX7XtEJUKWLUlikb7qTRWR1sld ubuntu@dev-01 sudo : ALL=(ALL) NOPASSWD:ALL shell : /bin/bash chpasswd : expire : false list : | linux:linux ssh_pwauth : true Note See meta-data part in cloud-init documentation : meta-data See user-data part in cloud-init documentation : user-data","title":"Environment"},{"location":"config_env/#environment","text":"","title":"Environment"},{"location":"config_env/#simplified-mode","text":"Configure your future OS environment. This has to be done this way when cloud-init is disable . Otherwise this part won't be taken into account. This configuration will be turned into cloud-init user-data & meta-data files by sheep during execution. users : List users you want to create giving at least the name name : User name sudoer : Add this user to sudoer NB : It will be created as a no password sudoer password : User password ssh_authorized_key : Machine public key from where you want to access this server shell : User type of shell local_hostname : Machine hostname environment : users : - name : linux sudoer : true password : linux ssh_authorized_key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdXnRJVWf7OvFa0UZPkvDBave2BWhr29HFlO/bI/98rmPc0zn24a8Wplo/Sts4SrL3xZNATH5tWwNpPulBThPqnjdMU4Rw2Jf/mjlQXiT7+w3w60/HrMd62J/d/dyYrIuvuog3OAEi1vsiKCRm/9ptpbNA4E34ZUBSOpT3bx0b4NszYB2g7VdcmgHHXSY16AVCv3I3ZN0UmWphw1hpjpxfHTinE2pR5L0HVMikxqaxjCZI7DSpi8f4gQJn7gjLTh905o751Z3s7Y4L/v9NTEXmCPF425krwxDD4EMSMJ6BXgAExvPolWV0/W9HUtKX7XtEJUKWLUlikb7qTRWR1sld ubuntu@dev-01 shell : bash local_hostname : sheep Note If users are configured but none of them can access the OS because neither the ssh_authorized_key nor a password is configured, the program will exit with an error If this section is left empty: User linux with password linux will be given. Machine hostname will be sheep .","title":"Simplified mode"},{"location":"config_env/#advanced-mode-cloud-init","text":"We can use more features enabled by cloud-init to set up the OS environment. Configuring the envrionment with cloud-init is done through meta-data and user-data files. The name of these files are the same than in cloudInit sheep section userData and metaData . Refer to cloud-init documentation for more details about syntax and options. cloudInit : enable : true metaData : instance-id : 001-local01 local-hostname : sheep networkConfig : version : 2 ethernets : enp12s0 : dhcp4 : true ens9 : addresses : - 172.19.17.111/24 gateway4 : 172.19.17.1 userData : users : - name : linux lock_passwd : false ssh_authorized_keys : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdXnRJVWf7OvFa0UZPkvDBave2BWhr29HFlO/bI/98rmPc0zn24a8Wplo/Sts4SrL3xZNATH5tWwNpPulBThPqnjdMU4Rw2Jf/mjlQXiT7+w3w60/HrMd62J/d/dyYrIuvuog3OAEi1vsiKCRm/9ptpbNA4E34ZUBSOpT3bx0b4NszYB2g7VdcmgHHXSY16AVCv3I3ZN0UmWphw1hpjpxfHTinE2pR5L0HVMikxqaxjCZI7DSpi8f4gQJn7gjLTh905o751Z3s7Y4L/v9NTEXmCPF425krwxDD4EMSMJ6BXgAExvPolWV0/W9HUtKX7XtEJUKWLUlikb7qTRWR1sld ubuntu@dev-01 sudo : ALL=(ALL) NOPASSWD:ALL shell : /bin/bash chpasswd : expire : false list : | linux:linux ssh_pwauth : true Note See meta-data part in cloud-init documentation : meta-data See user-data part in cloud-init documentation : user-data","title":"Advanced mode (cloud-init)"},{"location":"config_example/","text":"Sheep configuration full examples Simplified Below is an example of a Sheep configuration file in simplified mode. bootloader : kernel_parameter : 'console=ttyS1,115200n8' linux : image : https://cloud.centos.org/centos/7/images/CentOS-7-aarch64-GenericCloud-2003.qcow2 label : CentOS 7 device : /dev/sda rootfsType : ext4 rootfsLabel : centos-fs selinux : disable blacklist_module : - mei - mei_me network : interfaces : - id : enp12s0 type : dhcp - id : ens9 type : static address : x.x.x.x gateway : x.x.x.x pxePilot : enable : true url : http://172.19.17.1:3478 config_after_reboot : local environment : users : - name : linux sudoer : true password : linux ssh_authorized_key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdXnRJVWf7OvFa0UZPkvDBave2BWhr29HFlO/bI/98rmPc0zn24a8Wplo/Sts4SrL3xZNATH5tWwNpPulBThPqnjdMU4Rw2Jf/mjlQXiT7+w3w60/HrMd62J/d/dyYrIuvuog3OAEi1vsiKCRm/9ptpbNA4E34ZUBSOpT3bx0b4NszYB2g7VdcmgHHXSY16AVCv3I3ZN0UmWphw1hpjpxfHTinE2pR5L0HVMikxqaxjCZI7DSpi8f4gQJn7gjLTh905o751Z3s7Y4L/v9NTEXmCPF425krwxDD4EMSMJ6BXgAExvPolWV0/W9HUtKX7XtEJUKWLUlikb7qTRWR1sld ubuntu@dev-01 shell : /bin/bash local_hostname : sheep cloudInit : enable : false instance_id : 001-local01 sheep : reboot : false Cloud-init users oriented Below is an example of a configuration file where appears clearly the configurable part of cloud-init. bootloader : kernel_parameter : 'console=ttyS1,115200n8' linux : image : https://cloud.centos.org/centos/7/images/CentOS-7-aarch64-GenericCloud-2003.qcow2 label : CentOS 7 device : /dev/sda rootfsType : ext4 rootfsLabel : centos-fs selinux : disable blacklist_module : - mei - mei_me pxePilot : enable : true url : http://172.19.17.1:3478 config_after_reboot : local cloudInit : enable : true metaData : instance-id : 001-local01 local-hostname : sheep networkConfig : version : 2 ethernets : enp12s0 : dhcp4 : true ens9 : addresses : - 172.19.17.111/24 gateway4 : 172.19.17.1 userData : users : - name : linux lock_passwd : false ssh_authorized_keys : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdXnRJVWf7OvFa0UZPkvDBave2BWhr29HFlO/bI/98rmPc0zn24a8Wplo/Sts4SrL3xZNATH5tWwNpPulBThPqnjdMU4Rw2Jf/mjlQXiT7+w3w60/HrMd62J/d/dyYrIuvuog3OAEi1vsiKCRm/9ptpbNA4E34ZUBSOpT3bx0b4NszYB2g7VdcmgHHXSY16AVCv3I3ZN0UmWphw1hpjpxfHTinE2pR5L0HVMikxqaxjCZI7DSpi8f4gQJn7gjLTh905o751Z3s7Y4L/v9NTEXmCPF425krwxDD4EMSMJ6BXgAExvPolWV0/W9HUtKX7XtEJUKWLUlikb7qTRWR1sld ubuntu@dev-01 sudo : ALL=(ALL) NOPASSWD:ALL shell : /bin/bash chpasswd : expire : false list : | linux:linux ssh_pwauth : true sheep : reboot : false","title":"Sheep configuration full examples"},{"location":"config_example/#sheep-configuration-full-examples","text":"","title":"Sheep configuration full examples"},{"location":"config_example/#simplified","text":"Below is an example of a Sheep configuration file in simplified mode. bootloader : kernel_parameter : 'console=ttyS1,115200n8' linux : image : https://cloud.centos.org/centos/7/images/CentOS-7-aarch64-GenericCloud-2003.qcow2 label : CentOS 7 device : /dev/sda rootfsType : ext4 rootfsLabel : centos-fs selinux : disable blacklist_module : - mei - mei_me network : interfaces : - id : enp12s0 type : dhcp - id : ens9 type : static address : x.x.x.x gateway : x.x.x.x pxePilot : enable : true url : http://172.19.17.1:3478 config_after_reboot : local environment : users : - name : linux sudoer : true password : linux ssh_authorized_key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdXnRJVWf7OvFa0UZPkvDBave2BWhr29HFlO/bI/98rmPc0zn24a8Wplo/Sts4SrL3xZNATH5tWwNpPulBThPqnjdMU4Rw2Jf/mjlQXiT7+w3w60/HrMd62J/d/dyYrIuvuog3OAEi1vsiKCRm/9ptpbNA4E34ZUBSOpT3bx0b4NszYB2g7VdcmgHHXSY16AVCv3I3ZN0UmWphw1hpjpxfHTinE2pR5L0HVMikxqaxjCZI7DSpi8f4gQJn7gjLTh905o751Z3s7Y4L/v9NTEXmCPF425krwxDD4EMSMJ6BXgAExvPolWV0/W9HUtKX7XtEJUKWLUlikb7qTRWR1sld ubuntu@dev-01 shell : /bin/bash local_hostname : sheep cloudInit : enable : false instance_id : 001-local01 sheep : reboot : false","title":"Simplified"},{"location":"config_example/#cloud-init-users-oriented","text":"Below is an example of a configuration file where appears clearly the configurable part of cloud-init. bootloader : kernel_parameter : 'console=ttyS1,115200n8' linux : image : https://cloud.centos.org/centos/7/images/CentOS-7-aarch64-GenericCloud-2003.qcow2 label : CentOS 7 device : /dev/sda rootfsType : ext4 rootfsLabel : centos-fs selinux : disable blacklist_module : - mei - mei_me pxePilot : enable : true url : http://172.19.17.1:3478 config_after_reboot : local cloudInit : enable : true metaData : instance-id : 001-local01 local-hostname : sheep networkConfig : version : 2 ethernets : enp12s0 : dhcp4 : true ens9 : addresses : - 172.19.17.111/24 gateway4 : 172.19.17.1 userData : users : - name : linux lock_passwd : false ssh_authorized_keys : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdXnRJVWf7OvFa0UZPkvDBave2BWhr29HFlO/bI/98rmPc0zn24a8Wplo/Sts4SrL3xZNATH5tWwNpPulBThPqnjdMU4Rw2Jf/mjlQXiT7+w3w60/HrMd62J/d/dyYrIuvuog3OAEi1vsiKCRm/9ptpbNA4E34ZUBSOpT3bx0b4NszYB2g7VdcmgHHXSY16AVCv3I3ZN0UmWphw1hpjpxfHTinE2pR5L0HVMikxqaxjCZI7DSpi8f4gQJn7gjLTh905o751Z3s7Y4L/v9NTEXmCPF425krwxDD4EMSMJ6BXgAExvPolWV0/W9HUtKX7XtEJUKWLUlikb7qTRWR1sld ubuntu@dev-01 sudo : ALL=(ALL) NOPASSWD:ALL shell : /bin/bash chpasswd : expire : false list : | linux:linux ssh_pwauth : true sheep : reboot : false","title":"Cloud-init users oriented"},{"location":"config_lin/","text":"Linux installation Bootloaders Supported bootloaders GRUB is the only one supported bootloader at this time. There is currently no plan to support more bootloaders. Supported boot modes Sheep is able to install the operating system using either UEFI mode and Legacy (MBR) mode Configuration Configure the bootloader of the future linux OS image : Path to grub-efi.tar.gz archive - For UEFI system only kernel_parameter : Kernel parameters you want to add to customize the way your system boots bootloader : image : http://path/to/grub-efi.tar.gz kernel_parameter : 'console=ttyS1,57600n8' Note Sheep does not support multiboot. Be careful, installating Linux with Sheep on a drive, flush the whole partition table on the drive. Linux system Configure your linux OS image : Path to the linux filesystem image you want to use label : Name your distribution for EFI menu entry and grub menu - Default value Linux device : Storage device to contain OS - First storage disk listed during the installation by default rootfsType : ext4 & btrfs supported - Default value ext4 rootfsLabel : label of root partition It has to be 12 characters or less : [0-9] [a-z] [A-Z] - _ allowed Default value rootfs selinux : enable or disable - Default value disable blacklist_module : List kernel module that has to be disable linux : image : https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img label : ubuntu_16_09 device : /dev/sda rootfsType : ext4 rootfsLabel : cloudimg-rootfs selinux : disable blacklist_module : - mei - mei_me Note SELINUX isn't used by every linux distribtuion. For example enabling it for ubuntu will have no effect Permissive mode of Selinux not available for the moment with sheep Pxe-pilot Configure pxe-pilot with sheep installation enable : true or false url : Pxe-pilot API endpoint URL config_after_reboot : Pxe-pilot configuration name to indicate the machine to reboot on it's hard disk pxePilot : enable : true url : http://pxe_pilot_server_address config_after_reboot : local Sheep execution Configure machine reboot by the end of sheep execution. reboot : true or false sheep : reboot : false","title":"Linux installation"},{"location":"config_lin/#linux-installation","text":"","title":"Linux installation"},{"location":"config_lin/#bootloaders","text":"","title":"Bootloaders"},{"location":"config_lin/#supported-bootloaders","text":"GRUB is the only one supported bootloader at this time. There is currently no plan to support more bootloaders.","title":"Supported bootloaders"},{"location":"config_lin/#supported-boot-modes","text":"Sheep is able to install the operating system using either UEFI mode and Legacy (MBR) mode","title":"Supported boot modes"},{"location":"config_lin/#configuration","text":"Configure the bootloader of the future linux OS image : Path to grub-efi.tar.gz archive - For UEFI system only kernel_parameter : Kernel parameters you want to add to customize the way your system boots bootloader : image : http://path/to/grub-efi.tar.gz kernel_parameter : 'console=ttyS1,57600n8' Note Sheep does not support multiboot. Be careful, installating Linux with Sheep on a drive, flush the whole partition table on the drive.","title":"Configuration"},{"location":"config_lin/#linux-system","text":"Configure your linux OS image : Path to the linux filesystem image you want to use label : Name your distribution for EFI menu entry and grub menu - Default value Linux device : Storage device to contain OS - First storage disk listed during the installation by default rootfsType : ext4 & btrfs supported - Default value ext4 rootfsLabel : label of root partition It has to be 12 characters or less : [0-9] [a-z] [A-Z] - _ allowed Default value rootfs selinux : enable or disable - Default value disable blacklist_module : List kernel module that has to be disable linux : image : https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img label : ubuntu_16_09 device : /dev/sda rootfsType : ext4 rootfsLabel : cloudimg-rootfs selinux : disable blacklist_module : - mei - mei_me Note SELINUX isn't used by every linux distribtuion. For example enabling it for ubuntu will have no effect Permissive mode of Selinux not available for the moment with sheep","title":"Linux system"},{"location":"config_lin/#pxe-pilot","text":"Configure pxe-pilot with sheep installation enable : true or false url : Pxe-pilot API endpoint URL config_after_reboot : Pxe-pilot configuration name to indicate the machine to reboot on it's hard disk pxePilot : enable : true url : http://pxe_pilot_server_address config_after_reboot : local","title":"Pxe-pilot"},{"location":"config_lin/#sheep-execution","text":"Configure machine reboot by the end of sheep execution. reboot : true or false sheep : reboot : false","title":"Sheep execution"},{"location":"config_net/","text":"Networking Basic network configuration Configure OS Network has to be done this way when cloud-init is disable . Otherwise this part won't be taken into account. This configuration will be turned into a cloud-init network configuration file by sheep during execution. interfaces : List of interfaces to configure id : Interface identifier type : static or dhcp address : Required in static mode gateway : Can be configured in static mode network : interfaces : - id : ens1 type : static address : 172.19.17.111 gateway : 172.19.17.1 Note If this section empty, the network will be configures by clou-init default mode That means dhcp on the first connected interface. Advanced network configuration with cloud-init usage Configure network in sheep-configuration file the same way you would writethe file network-config for cloud-init. This permit you to use all cloud-init features not adapted by sheep. Set .cloudInit.enabled on true to see that taken into account. See network part on cloud-init documentation : network-config","title":"Networking"},{"location":"config_net/#networking","text":"","title":"Networking"},{"location":"config_net/#basic-network-configuration","text":"Configure OS Network has to be done this way when cloud-init is disable . Otherwise this part won't be taken into account. This configuration will be turned into a cloud-init network configuration file by sheep during execution. interfaces : List of interfaces to configure id : Interface identifier type : static or dhcp address : Required in static mode gateway : Can be configured in static mode network : interfaces : - id : ens1 type : static address : 172.19.17.111 gateway : 172.19.17.1 Note If this section empty, the network will be configures by clou-init default mode That means dhcp on the first connected interface.","title":"Basic network configuration"},{"location":"config_net/#advanced-network-configuration-with-cloud-init-usage","text":"Configure network in sheep-configuration file the same way you would writethe file network-config for cloud-init. This permit you to use all cloud-init features not adapted by sheep. Set .cloudInit.enabled on true to see that taken into account. See network part on cloud-init documentation : network-config","title":"Advanced network configuration with cloud-init usage"},{"location":"internals/","text":"Internals This section describes how Sheep works internally. Installation process in UEFI boot mode Here are the steps executed by this tool in order to install a Linux distribution Wipe the target drive (every single partition is deleted) Create three GPT partitions The EFI System partition The cloud-init partition The Linux root filesystem partition Format partitions using the appropriate filesystem Mount partitions Get Linux root filesystem image and extract it Get EFI bootloader and install it Create boot entry in the EFI boot manager Write the grub menu Configure the Linux root filesystem using cloud-init Unmount partitions Reboot the machine Installation process in legacy boot mode Here are the steps executed by this tool in order to install a Linux distribution Wipe the target drive (every single partition is deleted) Create two GPT partitions The cloud-init partition The Linux root filesystem partition Format partitions using the appropriate filesystem Mount partitions Get Linux root filesystem image and extract it Write the MBR partition using grub-install Write the grub menu Configure the Linux root filesystem using cloud-init Unmount partitions Reboot the machine The full process run in a couple of seconds when using a tar.gz or tar.xz a root filesystem archive. It takes additionnal time (depending on your CPU performance) when extracting Qcow2","title":"Internals"},{"location":"internals/#internals","text":"This section describes how Sheep works internally.","title":"Internals"},{"location":"internals/#installation-process-in-uefi-boot-mode","text":"Here are the steps executed by this tool in order to install a Linux distribution Wipe the target drive (every single partition is deleted) Create three GPT partitions The EFI System partition The cloud-init partition The Linux root filesystem partition Format partitions using the appropriate filesystem Mount partitions Get Linux root filesystem image and extract it Get EFI bootloader and install it Create boot entry in the EFI boot manager Write the grub menu Configure the Linux root filesystem using cloud-init Unmount partitions Reboot the machine","title":"Installation process in UEFI boot mode"},{"location":"internals/#installation-process-in-legacy-boot-mode","text":"Here are the steps executed by this tool in order to install a Linux distribution Wipe the target drive (every single partition is deleted) Create two GPT partitions The cloud-init partition The Linux root filesystem partition Format partitions using the appropriate filesystem Mount partitions Get Linux root filesystem image and extract it Write the MBR partition using grub-install Write the grub menu Configure the Linux root filesystem using cloud-init Unmount partitions Reboot the machine The full process run in a couple of seconds when using a tar.gz or tar.xz a root filesystem archive. It takes additionnal time (depending on your CPU performance) when extracting Qcow2","title":"Installation process in legacy boot mode"},{"location":"launching/","text":"Sheep launching Launch sheep using sheep-live This first way to launch sheep makes the process run fully automated. It is documented in sheep-live documentation Execution without kernel parameters command line Reading variables through /proc/cmdline is good for deployment automation, especially when booting a live distribution from the network as an installation environment. However, we are able to run Sheep passing parameters directly to the script because there are no reason to enforce this way of doing. We are be able to pass parameters even if it was not previoulsy configured in the kernel parameter line. It's also usefull for testing purpose during development because we can run different tests without the need of rebooting the machine. See the example below : SHEEP_PARAMETERS = 'sheep.config=http://netserver/ubuntu-16.04-leopard-sheep-cfg.yml' sheep","title":"Sheep launching"},{"location":"launching/#sheep-launching","text":"","title":"Sheep launching"},{"location":"launching/#launch-sheep-using-sheep-live","text":"This first way to launch sheep makes the process run fully automated. It is documented in sheep-live documentation","title":"Launch sheep using sheep-live"},{"location":"launching/#execution-without-kernel-parameters-command-line","text":"Reading variables through /proc/cmdline is good for deployment automation, especially when booting a live distribution from the network as an installation environment. However, we are able to run Sheep passing parameters directly to the script because there are no reason to enforce this way of doing. We are be able to pass parameters even if it was not previoulsy configured in the kernel parameter line. It's also usefull for testing purpose during development because we can run different tests without the need of rebooting the machine. See the example below : SHEEP_PARAMETERS = 'sheep.config=http://netserver/ubuntu-16.04-leopard-sheep-cfg.yml' sheep","title":"Execution without kernel parameters command line"},{"location":"pxe-pilot/","text":"PXE Pilot integration This section describes how to automate Linux distribution installation Using Sheep & PXE Pilot with DNSMASQ as DHCP/TFTP server and a Syslinux EFI bootloader. The goal is to provide userfriendly interface to manage many servers and re-image any machine with any Linux distribution using a one line command.","title":"PXE Pilot integration"},{"location":"pxe-pilot/#pxe-pilot-integration","text":"This section describes how to automate Linux distribution installation Using Sheep & PXE Pilot with DNSMASQ as DHCP/TFTP server and a Syslinux EFI bootloader. The goal is to provide userfriendly interface to manage many servers and re-image any machine with any Linux distribution using a one line command.","title":"PXE Pilot integration"},{"location":"quickstart/","text":"Quickstart Installing a Linux distribution on a physical machine using Sheep basically consists in runnning a single script that will perform Linux installation in a fully automated way. The sheep script only needs a configuration file describing the Linux distribution you aim to install. Write a Sheep configuration Here is a minimalist Sheep YAML configuration bootloader : image : http://replace/by/real/path/grub.tar.gz linux : image : https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img label : Ubuntu 16.04 LTS network : interfaces : - id : ens1 type : dhcp environment : users : - name : linux sudoer : true password : linux ssh_authorized_key : ssh-rsa ... local_hostname : linux In this example, we use an official Ubuntu qcow2 cloud image. The bootloader image is only needed when your machine runs an UEFI firmware. When in BIOS (Legacy) mode, you can basically remove the bootloader section. Setup the execution environment The purpose of Sheep is to install Linux from Linux. That means you need your system to run Linux to install Linux on your local drive. That is the purpose of Sheep Live, a Live Linux distribution made to run Sheep. As Sheep primarily makes sense in a fully automated environement, Sheep Live provides artifacts to easily boot over the network. Download the Sheep Live kernel, initrd and root filesystem binaries here . Using these artifacts deployed on your TFTP/HTTP server, you can write a configuration to boot Sheep Live. Example using pxelinux/syslinux default sheep label sheep kernel /sheep-live/vmlinuz append boot=live fetch=http://netserver/sheep-live.squashfs initrd=/sheep-live/initrd.img ssh=sheep sheep.script=http://netserver/sheep sheep.config=http://netserver/ubuntu-16.04-leopard.yml startup=/usr/bin/sheep-service To learn more about Sheep Live, please refer to Sheep live environment page. Run Sheep Once Sheep Live is up and running, it automatically runs the Linux installation process using Sheep and then reboot the machine when installation complete. If for any reason you want to prevent Sheep to run automatically (e.g. to debug or run manually) you only have to remove the startup kernel parameter on the command line.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"Installing a Linux distribution on a physical machine using Sheep basically consists in runnning a single script that will perform Linux installation in a fully automated way. The sheep script only needs a configuration file describing the Linux distribution you aim to install.","title":"Quickstart"},{"location":"quickstart/#write-a-sheep-configuration","text":"Here is a minimalist Sheep YAML configuration bootloader : image : http://replace/by/real/path/grub.tar.gz linux : image : https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img label : Ubuntu 16.04 LTS network : interfaces : - id : ens1 type : dhcp environment : users : - name : linux sudoer : true password : linux ssh_authorized_key : ssh-rsa ... local_hostname : linux In this example, we use an official Ubuntu qcow2 cloud image. The bootloader image is only needed when your machine runs an UEFI firmware. When in BIOS (Legacy) mode, you can basically remove the bootloader section.","title":"Write a Sheep configuration"},{"location":"quickstart/#setup-the-execution-environment","text":"The purpose of Sheep is to install Linux from Linux. That means you need your system to run Linux to install Linux on your local drive. That is the purpose of Sheep Live, a Live Linux distribution made to run Sheep. As Sheep primarily makes sense in a fully automated environement, Sheep Live provides artifacts to easily boot over the network. Download the Sheep Live kernel, initrd and root filesystem binaries here . Using these artifacts deployed on your TFTP/HTTP server, you can write a configuration to boot Sheep Live. Example using pxelinux/syslinux default sheep label sheep kernel /sheep-live/vmlinuz append boot=live fetch=http://netserver/sheep-live.squashfs initrd=/sheep-live/initrd.img ssh=sheep sheep.script=http://netserver/sheep sheep.config=http://netserver/ubuntu-16.04-leopard.yml startup=/usr/bin/sheep-service To learn more about Sheep Live, please refer to Sheep live environment page.","title":"Setup the execution environment"},{"location":"quickstart/#run-sheep","text":"Once Sheep Live is up and running, it automatically runs the Linux installation process using Sheep and then reboot the machine when installation complete. If for any reason you want to prevent Sheep to run automatically (e.g. to debug or run manually) you only have to remove the startup kernel parameter on the command line.","title":"Run Sheep"},{"location":"sheep-live/","text":"Sheep-live What is sheep-live ? Sheep-live is a Debian 10 Linux based on the GRML Live building system. We use it to have a faster and optimized sheep execution. It contains some packages absent in a basic grml and has a mechanism to download and run sheep via the information given in kernel command parameters while launching sheep-live. As it, the user can simply have on his main server the sheep configuration file and the pxeboot file specifying in the kernel parameters to launch the service sheep when booting on sheep-live. Why sheep-live ? Sheep could be run from any Linux distribution as soon as all the dependencies are present. Providing a specific distribution gives two major advantages to avoid undesirable side effects : Linux environment to run Sheep with all the needed material for Sheep inside (avoid internet interaction during the Sheep process) A distribution used to test and validate sheep in the continuous integration platform How to create a sheep-live build ? All the documentation related to this question is available in the git repository sheep-live How to launch sheep-live To launch sheep-live, place the sheep-live squashfs in your web server, the initrd and the kernel file in your HTTP / TFTP server. Create a network boot file specifying the path to sheep-live squashfs. If you want sheep to be run automatically after the operating system boot, specify it in the kernel command line with startup=/usr/bin/sheep-service . Below is an example of a pxelinux file we use to launch sheep on our machines : DEFAULT sheeplive label sheeplive kernel / sheep - live / vmlinuz append boot = live fetch = http : // server_add / sheep - live . squashfs initrd =/ sheep - live / initrd . img ssh = sheep console = ttyS1 , 57600 n8 sheep . script = http : // server_add / sheep . sh sheep . config = http : // server_add / sheepCfg . yml startup =/ usr / bin / sheep - service With server_add the address of the network interface connected to the machine we want to install. As shown above, GRML kernel parameters can be used to tune your configuration. Here are the Sheep specific kernel parameters to automatically run Sheep when Sheep Live is booted: sheep.script=http://... : URL to download Sheep script from. sheep.config=http://... : URL to download the Sheep YAML configuration for your machine. startup=/usr/bin/sheep-service : Give script path to automatically start the Sheep service on boot (automatically install linux on your drive). Without the startup parameter you'll have to log into Sheep Live to run the Sheep service $ sheep-service sheep.log.level : Configure the logger with value error warning info or debug . sheep.delay : Delay in seconds to delay sheep-service execution. Can be useful to avoid having boot log in sheep log.","title":"Sheep-live"},{"location":"sheep-live/#sheep-live","text":"","title":"Sheep-live"},{"location":"sheep-live/#what-is-sheep-live","text":"Sheep-live is a Debian 10 Linux based on the GRML Live building system. We use it to have a faster and optimized sheep execution. It contains some packages absent in a basic grml and has a mechanism to download and run sheep via the information given in kernel command parameters while launching sheep-live. As it, the user can simply have on his main server the sheep configuration file and the pxeboot file specifying in the kernel parameters to launch the service sheep when booting on sheep-live.","title":"What is sheep-live ?"},{"location":"sheep-live/#why-sheep-live","text":"Sheep could be run from any Linux distribution as soon as all the dependencies are present. Providing a specific distribution gives two major advantages to avoid undesirable side effects : Linux environment to run Sheep with all the needed material for Sheep inside (avoid internet interaction during the Sheep process) A distribution used to test and validate sheep in the continuous integration platform","title":"Why sheep-live ?"},{"location":"sheep-live/#how-to-create-a-sheep-live-build","text":"All the documentation related to this question is available in the git repository sheep-live","title":"How to create a sheep-live build ?"},{"location":"sheep-live/#how-to-launch-sheep-live","text":"To launch sheep-live, place the sheep-live squashfs in your web server, the initrd and the kernel file in your HTTP / TFTP server. Create a network boot file specifying the path to sheep-live squashfs. If you want sheep to be run automatically after the operating system boot, specify it in the kernel command line with startup=/usr/bin/sheep-service . Below is an example of a pxelinux file we use to launch sheep on our machines : DEFAULT sheeplive label sheeplive kernel / sheep - live / vmlinuz append boot = live fetch = http : // server_add / sheep - live . squashfs initrd =/ sheep - live / initrd . img ssh = sheep console = ttyS1 , 57600 n8 sheep . script = http : // server_add / sheep . sh sheep . config = http : // server_add / sheepCfg . yml startup =/ usr / bin / sheep - service With server_add the address of the network interface connected to the machine we want to install. As shown above, GRML kernel parameters can be used to tune your configuration. Here are the Sheep specific kernel parameters to automatically run Sheep when Sheep Live is booted: sheep.script=http://... : URL to download Sheep script from. sheep.config=http://... : URL to download the Sheep YAML configuration for your machine. startup=/usr/bin/sheep-service : Give script path to automatically start the Sheep service on boot (automatically install linux on your drive). Without the startup parameter you'll have to log into Sheep Live to run the Sheep service $ sheep-service sheep.log.level : Configure the logger with value error warning info or debug . sheep.delay : Delay in seconds to delay sheep-service execution. Can be useful to avoid having boot log in sheep log.","title":"How to launch sheep-live"}]}